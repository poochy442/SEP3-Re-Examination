@page "/edit_event/{EventId:int}"
@using DataClasses
@using Client.Models
@using System.Net.Http
<<<<<<< HEAD
=======
@using Newtonsoft.Json
>>>>>>> C#
@inject HttpClient Http
@inject NavigationManager UriHelper

<h1>New Event</h1>

<EditForm Model="@eventModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@eventModel" />

    <p>
        <label>
            Event Name:
            <InputText id="eventName" @bind-Value="eventModel.EventName" />
        </label>
    </p>
    <p>
        <label>
            Event Category:
            <InputSelect id="category" @bind-Value="eventModel.Category">
                <option value="">Select Category</option>
                <option value="Educational">@Event.CATEGORIES.Educational</option>
                <option value="Entertainment">@Event.CATEGORIES.Entertainment</option>
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Maximum Accomidation:
            <InputNumber id="accomidation" @bind-Value="eventModel.NumberOfSeats" />
        </label>
    </p>
    <p>
        <label>
            Start time:
            <InputDate id="startTime" @bind-Value="eventModel.StartTime" />
        </label>
    </p>
    <p>
        <label>
            End time:
            <InputDate id="endTime" @bind-Value="eventModel.EndTime" />
        </label>
    </p>

    <button type="submit">Submit</button>
    <button @onclick="CancelEvent">Delete Event</button>

    <p id="errorMessage"></p>
</EditForm>

@code {
    private EventModel eventModel = new EventModel();
    private EditContext editContext;

    [Parameter]
    public int EventId { get; set; }

<<<<<<< HEAD
    protected override void OnInitialized()
    {
        eventModel.StartTime = DateTime.Now;
        eventModel.EndTime = DateTime.Now.AddHours(2);
        editContext = new EditContext(eventModel);
        eventModel.Host = new Event.EventHost(
            "Kenneth",
            "Jensen",
            "123@abc.com",
            "12345678");
=======
    private Event EventEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        List<Event> events = await Http.GetFromJsonAsync<List<Event>>($"event?id={EventId}");
        EventEdit = events[0];
        eventModel.SetEvent(EventEdit);
        editContext = new EditContext(eventModel);
>>>>>>> C#
    }

    private async Task HandleValidSubmit()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            Console.WriteLine("IsValid\n");
            HttpResponseMessage rm = await Http.PutAsJsonAsync<Event>($"event?id={EventId}", eventModel.GetEvent());
            try
            {
                rm.EnsureSuccessStatusCode();
                UriHelper.NavigateTo("schedule");
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine(e.Message + "\n" + e.StackTrace);
                // Display error
            }
        }
        else
        {
            Console.WriteLine("IsNotValid");
        }
    }

    private async Task CancelEvent()
    {
        Console.WriteLine("CancelEvent called\n");
        HttpResponseMessage rm = await Http.DeleteAsync($"event?id={EventId}");
    }
}